/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lvxingpai.yunkai;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-11")
public class ChatGroup implements org.apache.thrift.TBase<ChatGroup, ChatGroup._Fields>, java.io.Serializable, Cloneable, Comparable<ChatGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChatGroup");

  private static final org.apache.thrift.protocol.TField CHAT_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatGroupId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("groupDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("admin", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PARTICIPANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("participants", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField MAX_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxUsers", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField VISIBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("visible", org.apache.thrift.protocol.TType.BOOL, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ChatGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ChatGroupTupleSchemeFactory());
  }

  private long chatGroupId; // required
  private String name; // required
  private String groupDesc; // optional
  private GroupType groupType; // required
  private String avatar; // optional
  private List<String> tags; // optional
  private long creator; // required
  private List<Long> admin; // required
  private List<Long> participants; // required
  private int maxUsers; // required
  private long createTime; // required
  private long updateTime; // required
  private boolean visible; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAT_GROUP_ID((short)1, "chatGroupId"),
    NAME((short)2, "name"),
    GROUP_DESC((short)3, "groupDesc"),
    /**
     * 
     * @see GroupType
     */
    GROUP_TYPE((short)4, "groupType"),
    AVATAR((short)5, "avatar"),
    TAGS((short)6, "tags"),
    CREATOR((short)7, "creator"),
    ADMIN((short)8, "admin"),
    PARTICIPANTS((short)9, "participants"),
    MAX_USERS((short)10, "maxUsers"),
    CREATE_TIME((short)11, "createTime"),
    UPDATE_TIME((short)12, "updateTime"),
    VISIBLE((short)13, "visible");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAT_GROUP_ID
          return CHAT_GROUP_ID;
        case 2: // NAME
          return NAME;
        case 3: // GROUP_DESC
          return GROUP_DESC;
        case 4: // GROUP_TYPE
          return GROUP_TYPE;
        case 5: // AVATAR
          return AVATAR;
        case 6: // TAGS
          return TAGS;
        case 7: // CREATOR
          return CREATOR;
        case 8: // ADMIN
          return ADMIN;
        case 9: // PARTICIPANTS
          return PARTICIPANTS;
        case 10: // MAX_USERS
          return MAX_USERS;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // UPDATE_TIME
          return UPDATE_TIME;
        case 13: // VISIBLE
          return VISIBLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHATGROUPID_ISSET_ID = 0;
  private static final int __CREATOR_ISSET_ID = 1;
  private static final int __MAXUSERS_ISSET_ID = 2;
  private static final int __CREATETIME_ISSET_ID = 3;
  private static final int __UPDATETIME_ISSET_ID = 4;
  private static final int __VISIBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUP_DESC,_Fields.AVATAR,_Fields.TAGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAT_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("chatGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_DESC, new org.apache.thrift.meta_data.FieldMetaData("groupDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("groupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, GroupType.class)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADMIN, new org.apache.thrift.meta_data.FieldMetaData("admin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PARTICIPANTS, new org.apache.thrift.meta_data.FieldMetaData("participants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MAX_USERS, new org.apache.thrift.meta_data.FieldMetaData("maxUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VISIBLE, new org.apache.thrift.meta_data.FieldMetaData("visible", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChatGroup.class, metaDataMap);
  }

  public ChatGroup() {
  }

  public ChatGroup(
    long chatGroupId,
    String name,
    GroupType groupType,
    long creator,
    List<Long> admin,
    List<Long> participants,
    int maxUsers,
    long createTime,
    long updateTime,
    boolean visible)
  {
    this();
    this.chatGroupId = chatGroupId;
    setChatGroupIdIsSet(true);
    this.name = name;
    this.groupType = groupType;
    this.creator = creator;
    setCreatorIsSet(true);
    this.admin = admin;
    this.participants = participants;
    this.maxUsers = maxUsers;
    setMaxUsersIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.visible = visible;
    setVisibleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatGroup(ChatGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.chatGroupId = other.chatGroupId;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetGroupDesc()) {
      this.groupDesc = other.groupDesc;
    }
    if (other.isSetGroupType()) {
      this.groupType = other.groupType;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    if (other.isSetTags()) {
      List<String> __this__tags = new ArrayList<String>(other.tags);
      this.tags = __this__tags;
    }
    this.creator = other.creator;
    if (other.isSetAdmin()) {
      List<Long> __this__admin = new ArrayList<Long>(other.admin);
      this.admin = __this__admin;
    }
    if (other.isSetParticipants()) {
      List<Long> __this__participants = new ArrayList<Long>(other.participants);
      this.participants = __this__participants;
    }
    this.maxUsers = other.maxUsers;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.visible = other.visible;
  }

  public ChatGroup deepCopy() {
    return new ChatGroup(this);
  }

  @Override
  public void clear() {
    setChatGroupIdIsSet(false);
    this.chatGroupId = 0;
    this.name = null;
    this.groupDesc = null;
    this.groupType = null;
    this.avatar = null;
    this.tags = null;
    setCreatorIsSet(false);
    this.creator = 0;
    this.admin = null;
    this.participants = null;
    setMaxUsersIsSet(false);
    this.maxUsers = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setVisibleIsSet(false);
    this.visible = false;
  }

  public long getChatGroupId() {
    return this.chatGroupId;
  }

  public void setChatGroupId(long chatGroupId) {
    this.chatGroupId = chatGroupId;
    setChatGroupIdIsSet(true);
  }

  public void unsetChatGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHATGROUPID_ISSET_ID);
  }

  /** Returns true if field chatGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHATGROUPID_ISSET_ID);
  }

  public void setChatGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHATGROUPID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getGroupDesc() {
    return this.groupDesc;
  }

  public void setGroupDesc(String groupDesc) {
    this.groupDesc = groupDesc;
  }

  public void unsetGroupDesc() {
    this.groupDesc = null;
  }

  /** Returns true if field groupDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupDesc() {
    return this.groupDesc != null;
  }

  public void setGroupDescIsSet(boolean value) {
    if (!value) {
      this.groupDesc = null;
    }
  }

  /**
   * 
   * @see GroupType
   */
  public GroupType getGroupType() {
    return this.groupType;
  }

  /**
   * 
   * @see GroupType
   */
  public void setGroupType(GroupType groupType) {
    this.groupType = groupType;
  }

  public void unsetGroupType() {
    this.groupType = null;
  }

  /** Returns true if field groupType is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupType() {
    return this.groupType != null;
  }

  public void setGroupTypeIsSet(boolean value) {
    if (!value) {
      this.groupType = null;
    }
  }

  public String getAvatar() {
    return this.avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public java.util.Iterator<String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(String elem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(elem);
  }

  public List<String> getTags() {
    return this.tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public long getCreator() {
    return this.creator;
  }

  public void setCreator(long creator) {
    this.creator = creator;
    setCreatorIsSet(true);
  }

  public void unsetCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public int getAdminSize() {
    return (this.admin == null) ? 0 : this.admin.size();
  }

  public java.util.Iterator<Long> getAdminIterator() {
    return (this.admin == null) ? null : this.admin.iterator();
  }

  public void addToAdmin(long elem) {
    if (this.admin == null) {
      this.admin = new ArrayList<Long>();
    }
    this.admin.add(elem);
  }

  public List<Long> getAdmin() {
    return this.admin;
  }

  public void setAdmin(List<Long> admin) {
    this.admin = admin;
  }

  public void unsetAdmin() {
    this.admin = null;
  }

  /** Returns true if field admin is set (has been assigned a value) and false otherwise */
  public boolean isSetAdmin() {
    return this.admin != null;
  }

  public void setAdminIsSet(boolean value) {
    if (!value) {
      this.admin = null;
    }
  }

  public int getParticipantsSize() {
    return (this.participants == null) ? 0 : this.participants.size();
  }

  public java.util.Iterator<Long> getParticipantsIterator() {
    return (this.participants == null) ? null : this.participants.iterator();
  }

  public void addToParticipants(long elem) {
    if (this.participants == null) {
      this.participants = new ArrayList<Long>();
    }
    this.participants.add(elem);
  }

  public List<Long> getParticipants() {
    return this.participants;
  }

  public void setParticipants(List<Long> participants) {
    this.participants = participants;
  }

  public void unsetParticipants() {
    this.participants = null;
  }

  /** Returns true if field participants is set (has been assigned a value) and false otherwise */
  public boolean isSetParticipants() {
    return this.participants != null;
  }

  public void setParticipantsIsSet(boolean value) {
    if (!value) {
      this.participants = null;
    }
  }

  public int getMaxUsers() {
    return this.maxUsers;
  }

  public void setMaxUsers(int maxUsers) {
    this.maxUsers = maxUsers;
    setMaxUsersIsSet(true);
  }

  public void unsetMaxUsers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXUSERS_ISSET_ID);
  }

  /** Returns true if field maxUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxUsers() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXUSERS_ISSET_ID);
  }

  public void setMaxUsersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXUSERS_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public void setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public void setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public boolean isVisible() {
    return this.visible;
  }

  public void setVisible(boolean visible) {
    this.visible = visible;
    setVisibleIsSet(true);
  }

  public void unsetVisible() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISIBLE_ISSET_ID);
  }

  /** Returns true if field visible is set (has been assigned a value) and false otherwise */
  public boolean isSetVisible() {
    return EncodingUtils.testBit(__isset_bitfield, __VISIBLE_ISSET_ID);
  }

  public void setVisibleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISIBLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHAT_GROUP_ID:
      if (value == null) {
        unsetChatGroupId();
      } else {
        setChatGroupId((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GROUP_DESC:
      if (value == null) {
        unsetGroupDesc();
      } else {
        setGroupDesc((String)value);
      }
      break;

    case GROUP_TYPE:
      if (value == null) {
        unsetGroupType();
      } else {
        setGroupType((GroupType)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((List<String>)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Long)value);
      }
      break;

    case ADMIN:
      if (value == null) {
        unsetAdmin();
      } else {
        setAdmin((List<Long>)value);
      }
      break;

    case PARTICIPANTS:
      if (value == null) {
        unsetParticipants();
      } else {
        setParticipants((List<Long>)value);
      }
      break;

    case MAX_USERS:
      if (value == null) {
        unsetMaxUsers();
      } else {
        setMaxUsers((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case VISIBLE:
      if (value == null) {
        unsetVisible();
      } else {
        setVisible((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAT_GROUP_ID:
      return Long.valueOf(getChatGroupId());

    case NAME:
      return getName();

    case GROUP_DESC:
      return getGroupDesc();

    case GROUP_TYPE:
      return getGroupType();

    case AVATAR:
      return getAvatar();

    case TAGS:
      return getTags();

    case CREATOR:
      return Long.valueOf(getCreator());

    case ADMIN:
      return getAdmin();

    case PARTICIPANTS:
      return getParticipants();

    case MAX_USERS:
      return Integer.valueOf(getMaxUsers());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case VISIBLE:
      return Boolean.valueOf(isVisible());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHAT_GROUP_ID:
      return isSetChatGroupId();
    case NAME:
      return isSetName();
    case GROUP_DESC:
      return isSetGroupDesc();
    case GROUP_TYPE:
      return isSetGroupType();
    case AVATAR:
      return isSetAvatar();
    case TAGS:
      return isSetTags();
    case CREATOR:
      return isSetCreator();
    case ADMIN:
      return isSetAdmin();
    case PARTICIPANTS:
      return isSetParticipants();
    case MAX_USERS:
      return isSetMaxUsers();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case VISIBLE:
      return isSetVisible();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatGroup)
      return this.equals((ChatGroup)that);
    return false;
  }

  public boolean equals(ChatGroup that) {
    if (that == null)
      return false;

    boolean this_present_chatGroupId = true;
    boolean that_present_chatGroupId = true;
    if (this_present_chatGroupId || that_present_chatGroupId) {
      if (!(this_present_chatGroupId && that_present_chatGroupId))
        return false;
      if (this.chatGroupId != that.chatGroupId)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_groupDesc = true && this.isSetGroupDesc();
    boolean that_present_groupDesc = true && that.isSetGroupDesc();
    if (this_present_groupDesc || that_present_groupDesc) {
      if (!(this_present_groupDesc && that_present_groupDesc))
        return false;
      if (!this.groupDesc.equals(that.groupDesc))
        return false;
    }

    boolean this_present_groupType = true && this.isSetGroupType();
    boolean that_present_groupType = true && that.isSetGroupType();
    if (this_present_groupType || that_present_groupType) {
      if (!(this_present_groupType && that_present_groupType))
        return false;
      if (!this.groupType.equals(that.groupType))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    boolean this_present_admin = true && this.isSetAdmin();
    boolean that_present_admin = true && that.isSetAdmin();
    if (this_present_admin || that_present_admin) {
      if (!(this_present_admin && that_present_admin))
        return false;
      if (!this.admin.equals(that.admin))
        return false;
    }

    boolean this_present_participants = true && this.isSetParticipants();
    boolean that_present_participants = true && that.isSetParticipants();
    if (this_present_participants || that_present_participants) {
      if (!(this_present_participants && that_present_participants))
        return false;
      if (!this.participants.equals(that.participants))
        return false;
    }

    boolean this_present_maxUsers = true;
    boolean that_present_maxUsers = true;
    if (this_present_maxUsers || that_present_maxUsers) {
      if (!(this_present_maxUsers && that_present_maxUsers))
        return false;
      if (this.maxUsers != that.maxUsers)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_visible = true;
    boolean that_present_visible = true;
    if (this_present_visible || that_present_visible) {
      if (!(this_present_visible && that_present_visible))
        return false;
      if (this.visible != that.visible)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_chatGroupId = true;
    list.add(present_chatGroupId);
    if (present_chatGroupId)
      list.add(chatGroupId);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_groupDesc = true && (isSetGroupDesc());
    list.add(present_groupDesc);
    if (present_groupDesc)
      list.add(groupDesc);

    boolean present_groupType = true && (isSetGroupType());
    list.add(present_groupType);
    if (present_groupType)
      list.add(groupType.getValue());

    boolean present_avatar = true && (isSetAvatar());
    list.add(present_avatar);
    if (present_avatar)
      list.add(avatar);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_creator = true;
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_admin = true && (isSetAdmin());
    list.add(present_admin);
    if (present_admin)
      list.add(admin);

    boolean present_participants = true && (isSetParticipants());
    list.add(present_participants);
    if (present_participants)
      list.add(participants);

    boolean present_maxUsers = true;
    list.add(present_maxUsers);
    if (present_maxUsers)
      list.add(maxUsers);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_visible = true;
    list.add(present_visible);
    if (present_visible)
      list.add(visible);

    return list.hashCode();
  }

  @Override
  public int compareTo(ChatGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChatGroupId()).compareTo(other.isSetChatGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatGroupId, other.chatGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupDesc()).compareTo(other.isSetGroupDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupDesc, other.groupDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupType()).compareTo(other.isSetGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupType, other.groupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdmin()).compareTo(other.isSetAdmin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdmin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin, other.admin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParticipants()).compareTo(other.isSetParticipants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParticipants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.participants, other.participants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxUsers()).compareTo(other.isSetMaxUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUsers, other.maxUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisible()).compareTo(other.isSetVisible());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisible()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visible, other.visible);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ChatGroup(");
    boolean first = true;

    sb.append("chatGroupId:");
    sb.append(this.chatGroupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (isSetGroupDesc()) {
      if (!first) sb.append(", ");
      sb.append("groupDesc:");
      if (this.groupDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.groupDesc);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("groupType:");
    if (this.groupType == null) {
      sb.append("null");
    } else {
      sb.append(this.groupType);
    }
    first = false;
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetTags()) {
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("admin:");
    if (this.admin == null) {
      sb.append("null");
    } else {
      sb.append(this.admin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("participants:");
    if (this.participants == null) {
      sb.append("null");
    } else {
      sb.append(this.participants);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxUsers:");
    sb.append(this.maxUsers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("visible:");
    sb.append(this.visible);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChatGroupStandardSchemeFactory implements SchemeFactory {
    public ChatGroupStandardScheme getScheme() {
      return new ChatGroupStandardScheme();
    }
  }

  private static class ChatGroupStandardScheme extends StandardScheme<ChatGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChatGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAT_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chatGroupId = iprot.readI64();
              struct.setChatGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupDesc = iprot.readString();
              struct.setGroupDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupType = com.lvxingpai.yunkai.GroupType.findByValue(iprot.readI32());
              struct.setGroupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tags = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.tags.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.creator = iprot.readI64();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.admin = new ArrayList<Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.admin.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setAdminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARTICIPANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.participants = new ArrayList<Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.participants.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setParticipantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MAX_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxUsers = iprot.readI32();
              struct.setMaxUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VISIBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.visible = iprot.readBool();
              struct.setVisibleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChatGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHAT_GROUP_ID_FIELD_DESC);
      oprot.writeI64(struct.chatGroupId);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.groupDesc != null) {
        if (struct.isSetGroupDesc()) {
          oprot.writeFieldBegin(GROUP_DESC_FIELD_DESC);
          oprot.writeString(struct.groupDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupType != null) {
        oprot.writeFieldBegin(GROUP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.groupType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tags != null) {
        if (struct.isSetTags()) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (String _iter9 : struct.tags)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(CREATOR_FIELD_DESC);
      oprot.writeI64(struct.creator);
      oprot.writeFieldEnd();
      if (struct.admin != null) {
        oprot.writeFieldBegin(ADMIN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.admin.size()));
          for (long _iter10 : struct.admin)
          {
            oprot.writeI64(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.participants != null) {
        oprot.writeFieldBegin(PARTICIPANTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.participants.size()));
          for (long _iter11 : struct.participants)
          {
            oprot.writeI64(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_USERS_FIELD_DESC);
      oprot.writeI32(struct.maxUsers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VISIBLE_FIELD_DESC);
      oprot.writeBool(struct.visible);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChatGroupTupleSchemeFactory implements SchemeFactory {
    public ChatGroupTupleScheme getScheme() {
      return new ChatGroupTupleScheme();
    }
  }

  private static class ChatGroupTupleScheme extends TupleScheme<ChatGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChatGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChatGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetGroupDesc()) {
        optionals.set(2);
      }
      if (struct.isSetGroupType()) {
        optionals.set(3);
      }
      if (struct.isSetAvatar()) {
        optionals.set(4);
      }
      if (struct.isSetTags()) {
        optionals.set(5);
      }
      if (struct.isSetCreator()) {
        optionals.set(6);
      }
      if (struct.isSetAdmin()) {
        optionals.set(7);
      }
      if (struct.isSetParticipants()) {
        optionals.set(8);
      }
      if (struct.isSetMaxUsers()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(11);
      }
      if (struct.isSetVisible()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetChatGroupId()) {
        oprot.writeI64(struct.chatGroupId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetGroupDesc()) {
        oprot.writeString(struct.groupDesc);
      }
      if (struct.isSetGroupType()) {
        oprot.writeI32(struct.groupType.getValue());
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (String _iter12 : struct.tags)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetCreator()) {
        oprot.writeI64(struct.creator);
      }
      if (struct.isSetAdmin()) {
        {
          oprot.writeI32(struct.admin.size());
          for (long _iter13 : struct.admin)
          {
            oprot.writeI64(_iter13);
          }
        }
      }
      if (struct.isSetParticipants()) {
        {
          oprot.writeI32(struct.participants.size());
          for (long _iter14 : struct.participants)
          {
            oprot.writeI64(_iter14);
          }
        }
      }
      if (struct.isSetMaxUsers()) {
        oprot.writeI32(struct.maxUsers);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetVisible()) {
        oprot.writeBool(struct.visible);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChatGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.chatGroupId = iprot.readI64();
        struct.setChatGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupDesc = iprot.readString();
        struct.setGroupDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.groupType = com.lvxingpai.yunkai.GroupType.findByValue(iprot.readI32());
        struct.setGroupTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new ArrayList<String>(_list15.size);
          String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.tags.add(_elem16);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creator = iprot.readI64();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.admin = new ArrayList<Long>(_list18.size);
          long _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readI64();
            struct.admin.add(_elem19);
          }
        }
        struct.setAdminIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.participants = new ArrayList<Long>(_list21.size);
          long _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readI64();
            struct.participants.add(_elem22);
          }
        }
        struct.setParticipantsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.maxUsers = iprot.readI32();
        struct.setMaxUsersIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.visible = iprot.readBool();
        struct.setVisibleIsSet(true);
      }
    }
  }

}

