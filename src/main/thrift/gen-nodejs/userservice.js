//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./users_types');
//HELPER FUNCTIONS AND STRUCTURES

userservice_add_args = function(args) {
  this.val1 = null;
  this.val2 = null;
  if (args) {
    if (args.val1 !== undefined) {
      this.val1 = args.val1;
    }
    if (args.val2 !== undefined) {
      this.val2 = args.val2;
    }
  }
};
userservice_add_args.prototype = {};
userservice_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.val1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.val2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_add_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_add_args');
  if (this.val1 !== null && this.val1 !== undefined) {
    output.writeFieldBegin('val1', Thrift.Type.I32, 1);
    output.writeI32(this.val1);
    output.writeFieldEnd();
  }
  if (this.val2 !== null && this.val2 !== undefined) {
    output.writeFieldBegin('val2', Thrift.Type.I32, 2);
    output.writeI32(this.val2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_add_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_add_result.prototype = {};
userservice_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_add_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_add_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_range_args = function(args) {
  this.startVal = null;
  this.endVal = null;
  this.step = null;
  if (args) {
    if (args.startVal !== undefined) {
      this.startVal = args.startVal;
    }
    if (args.endVal !== undefined) {
      this.endVal = args.endVal;
    }
    if (args.step !== undefined) {
      this.step = args.step;
    }
  }
};
userservice_range_args.prototype = {};
userservice_range_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startVal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endVal = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.step = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_range_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_range_args');
  if (this.startVal !== null && this.startVal !== undefined) {
    output.writeFieldBegin('startVal', Thrift.Type.I32, 1);
    output.writeI32(this.startVal);
    output.writeFieldEnd();
  }
  if (this.endVal !== null && this.endVal !== undefined) {
    output.writeFieldBegin('endVal', Thrift.Type.I32, 2);
    output.writeI32(this.endVal);
    output.writeFieldEnd();
  }
  if (this.step !== null && this.step !== undefined) {
    output.writeFieldBegin('step', Thrift.Type.I32, 3);
    output.writeI32(this.step);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_range_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_range_result.prototype = {};
userservice_range_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_range_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_range_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserById_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
userservice_getUserById_args.prototype = {};
userservice_getUserById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserById_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserById_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserById_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserById_result.prototype = {};
userservice_getUserById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserById_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserInfo_args = function(args) {
  this.userId = null;
  this.userInfo = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userInfo !== undefined) {
      this.userInfo = args.userInfo;
    }
  }
};
userservice_updateUserInfo_args.prototype = {};
userservice_updateUserInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size32 = 0;
        var _rtmp336;
        this.userInfo = {};
        var _ktype33 = 0;
        var _vtype34 = 0;
        _rtmp336 = input.readMapBegin();
        _ktype33 = _rtmp336.ktype;
        _vtype34 = _rtmp336.vtype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var key38 = null;
          var val39 = null;
          key38 = input.readI32();
          val39 = input.readString();
          this.userInfo[key38] = val39;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserInfo_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserInfo_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.userInfo !== null && this.userInfo !== undefined) {
    output.writeFieldBegin('userInfo', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.userInfo));
    for (var kiter40 in this.userInfo)
    {
      if (this.userInfo.hasOwnProperty(kiter40))
      {
        var viter41 = this.userInfo[kiter40];
        output.writeI32(kiter40);
        output.writeString(viter41);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateUserInfo_result = function(args) {
};
userservice_updateUserInfo_result.prototype = {};
userservice_updateUserInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateUserInfo_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateUserInfo_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined) {
      this.userB = args.userB;
    }
  }
};
userservice_isContact_args.prototype = {};
userservice_isContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_isContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_isContact_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_isContact_result.prototype = {};
userservice_isContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_isContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_isContact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined) {
      this.userB = args.userB;
    }
  }
};
userservice_addContact_args.prototype = {};
userservice_addContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContact_result = function(args) {
};
userservice_addContact_result.prototype = {};
userservice_addContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContact_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContacts_args = function(args) {
  this.userA = null;
  this.targets = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
userservice_addContacts_args.prototype = {};
userservice_addContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.targets = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readI64();
          this.targets.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContacts_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContacts_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.targets.length);
    for (var iter49 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter49))
      {
        iter49 = this.targets[iter49];
        output.writeI64(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addContacts_result = function(args) {
};
userservice_addContacts_result.prototype = {};
userservice_addContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addContacts_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addContacts_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContact_args = function(args) {
  this.userA = null;
  this.userB = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.userB !== undefined) {
      this.userB = args.userB;
    }
  }
};
userservice_removeContact_args.prototype = {};
userservice_removeContact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userB = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContact_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContact_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.userB !== null && this.userB !== undefined) {
    output.writeFieldBegin('userB', Thrift.Type.I64, 2);
    output.writeI64(this.userB);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContact_result = function(args) {
};
userservice_removeContact_result.prototype = {};
userservice_removeContact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContact_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContact_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContacts_args = function(args) {
  this.userA = null;
  this.targets = null;
  if (args) {
    if (args.userA !== undefined) {
      this.userA = args.userA;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
userservice_removeContacts_args.prototype = {};
userservice_removeContacts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userA = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.targets = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readI64();
          this.targets.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContacts_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContacts_args');
  if (this.userA !== null && this.userA !== undefined) {
    output.writeFieldBegin('userA', Thrift.Type.I64, 1);
    output.writeI64(this.userA);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.targets.length);
    for (var iter57 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter57))
      {
        iter57 = this.targets[iter57];
        output.writeI64(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeContacts_result = function(args) {
};
userservice_removeContacts_result.prototype = {};
userservice_removeContacts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeContacts_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeContacts_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactList_args = function(args) {
  this.userId = null;
  this.fields = null;
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.count !== undefined) {
      this.count = args.count;
    }
  }
};
userservice_getContactList_args.prototype = {};
userservice_getContactList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.fields = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readI32();
          this.fields.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactList_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactList_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter65 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter65))
      {
        iter65 = this.fields[iter65];
        output.writeI32(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 4);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getContactList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
userservice_getContactList_result.prototype = {};
userservice_getContactList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.success = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new ttypes.UserInfo();
          elem72.read(input);
          this.success.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getContactList_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getContactList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter73 in this.success)
    {
      if (this.success.hasOwnProperty(iter73))
      {
        iter73 = this.success[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_login_args = function(args) {
  this.loginName = null;
  this.password = null;
  if (args) {
    if (args.loginName !== undefined) {
      this.loginName = args.loginName;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
userservice_login_args.prototype = {};
userservice_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.loginName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_login_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_login_args');
  if (this.loginName !== null && this.loginName !== undefined) {
    output.writeFieldBegin('loginName', Thrift.Type.STRING, 1);
    output.writeString(this.loginName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_login_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.AuthException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_login_result.prototype = {};
userservice_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.AuthException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_login_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUser_args = function(args) {
  this.nickName = null;
  this.password = null;
  this.tel = null;
  if (args) {
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
  }
};
userservice_createUser_args.prototype = {};
userservice_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUser_args');
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 3);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createUser_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_createUser_result.prototype = {};
userservice_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.InvalidArgsException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createChatGroup_args = function(args) {
  this.creator = null;
  this.name = null;
  this.participants = null;
  this.chatGroupProps = null;
  if (args) {
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.participants !== undefined) {
      this.participants = args.participants;
    }
    if (args.chatGroupProps !== undefined) {
      this.chatGroupProps = args.chatGroupProps;
    }
  }
};
userservice_createChatGroup_args.prototype = {};
userservice_createChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.creator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.participants = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readI64();
          this.participants.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size81 = 0;
        var _rtmp385;
        this.chatGroupProps = {};
        var _ktype82 = 0;
        var _vtype83 = 0;
        _rtmp385 = input.readMapBegin();
        _ktype82 = _rtmp385.ktype;
        _vtype83 = _rtmp385.vtype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var key87 = null;
          var val88 = null;
          key87 = input.readI32();
          val88 = input.readString();
          this.chatGroupProps[key87] = val88;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_createChatGroup_args');
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I64, 1);
    output.writeI64(this.creator);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.participants !== null && this.participants !== undefined) {
    output.writeFieldBegin('participants', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.participants.length);
    for (var iter89 in this.participants)
    {
      if (this.participants.hasOwnProperty(iter89))
      {
        iter89 = this.participants[iter89];
        output.writeI64(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.chatGroupProps !== null && this.chatGroupProps !== undefined) {
    output.writeFieldBegin('chatGroupProps', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.chatGroupProps));
    for (var kiter90 in this.chatGroupProps)
    {
      if (this.chatGroupProps.hasOwnProperty(kiter90))
      {
        var viter91 = this.chatGroupProps[kiter90];
        output.writeI32(kiter90);
        output.writeString(viter91);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_createChatGroup_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_createChatGroup_result.prototype = {};
userservice_createChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.InvalidArgsException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_createChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_createChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateChatGroup_args = function(args) {
  this.chatGroupId = null;
  this.chatGroupProps = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.chatGroupProps !== undefined) {
      this.chatGroupProps = args.chatGroupProps;
    }
  }
};
userservice_updateChatGroup_args.prototype = {};
userservice_updateChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size92 = 0;
        var _rtmp396;
        this.chatGroupProps = {};
        var _ktype93 = 0;
        var _vtype94 = 0;
        _rtmp396 = input.readMapBegin();
        _ktype93 = _rtmp396.ktype;
        _vtype94 = _rtmp396.vtype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var key98 = null;
          var val99 = null;
          key98 = input.readI32();
          val99 = input.readString();
          this.chatGroupProps[key98] = val99;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateChatGroup_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.chatGroupProps !== null && this.chatGroupProps !== undefined) {
    output.writeFieldBegin('chatGroupProps', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.chatGroupProps));
    for (var kiter100 in this.chatGroupProps)
    {
      if (this.chatGroupProps.hasOwnProperty(kiter100))
      {
        var viter101 = this.chatGroupProps[kiter100];
        output.writeI32(kiter100);
        output.writeString(viter101);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_updateChatGroup_result = function(args) {
  this.success = null;
  this.ex1 = null;
  this.ex2 = null;
  if (args instanceof ttypes.InvalidArgsException) {
    this.ex1 = args;
    return;
  }
  if (args instanceof ttypes.NotFoundException) {
    this.ex2 = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex1 !== undefined) {
      this.ex1 = args.ex1;
    }
    if (args.ex2 !== undefined) {
      this.ex2 = args.ex2;
    }
  }
};
userservice_updateChatGroup_result.prototype = {};
userservice_updateChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex1 = new ttypes.InvalidArgsException();
        this.ex1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex2 = new ttypes.NotFoundException();
        this.ex2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_updateChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_updateChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex1 !== null && this.ex1 !== undefined) {
    output.writeFieldBegin('ex1', Thrift.Type.STRUCT, 1);
    this.ex1.write(output);
    output.writeFieldEnd();
  }
  if (this.ex2 !== null && this.ex2 !== undefined) {
    output.writeFieldBegin('ex2', Thrift.Type.STRUCT, 2);
    this.ex2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroup_args = function(args) {
  this.chatGroupId = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
  }
};
userservice_getChatGroup_args.prototype = {};
userservice_getChatGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroup_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroup_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroup_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getChatGroup_result.prototype = {};
userservice_getChatGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ChatGroup();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroup_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroups_args = function(args) {
  this.userId = null;
  this.fields = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getUserChatGroups_args.prototype = {};
userservice_getUserChatGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.fields = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = input.readI32();
          this.fields.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroups_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroups_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter109 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter109))
      {
        iter109 = this.fields[iter109];
        output.writeI32(iter109);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getUserChatGroups_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getUserChatGroups_result.prototype = {};
userservice_getUserChatGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.success = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = new ttypes.ChatGroup();
          elem116.read(input);
          this.success.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getUserChatGroups_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getUserChatGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter117 in this.success)
    {
      if (this.success.hasOwnProperty(iter117))
      {
        iter117 = this.success[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.userIds = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.userIds !== undefined) {
      this.userIds = args.userIds;
    }
  }
};
userservice_addChatGroupMembers_args.prototype = {};
userservice_addChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.userIds = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = input.readI64();
          this.userIds.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_addChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter125 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter125))
      {
        iter125 = this.userIds[iter125];
        output.writeI64(iter125);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_addChatGroupMembers_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_addChatGroupMembers_result.prototype = {};
userservice_addChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_addChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_addChatGroupMembers_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.userIds = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.userIds !== undefined) {
      this.userIds = args.userIds;
    }
  }
};
userservice_removeChatGroupMembers_args.prototype = {};
userservice_removeChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.userIds = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = input.readI64();
          this.userIds.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.userIds !== null && this.userIds !== undefined) {
    output.writeFieldBegin('userIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.userIds.length);
    for (var iter133 in this.userIds)
    {
      if (this.userIds.hasOwnProperty(iter133))
      {
        iter133 = this.userIds[iter133];
        output.writeI64(iter133);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_removeChatGroupMembers_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_removeChatGroupMembers_result.prototype = {};
userservice_removeChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_removeChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_removeChatGroupMembers_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroupMembers_args = function(args) {
  this.chatGroupId = null;
  this.fields = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    }
  }
};
userservice_getChatGroupMembers_args.prototype = {};
userservice_getChatGroupMembers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size134 = 0;
        var _rtmp3138;
        this.fields = [];
        var _etype137 = 0;
        _rtmp3138 = input.readListBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = input.readI32();
          this.fields.push(elem140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroupMembers_args.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroupMembers_args');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.fields.length);
    for (var iter141 in this.fields)
    {
      if (this.fields.hasOwnProperty(iter141))
      {
        iter141 = this.fields[iter141];
        output.writeI32(iter141);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userservice_getChatGroupMembers_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.NotFoundException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
userservice_getChatGroupMembers_result.prototype = {};
userservice_getChatGroupMembers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size142 = 0;
        var _rtmp3146;
        this.success = [];
        var _etype145 = 0;
        _rtmp3146 = input.readListBegin();
        _etype145 = _rtmp3146.etype;
        _size142 = _rtmp3146.size;
        for (var _i147 = 0; _i147 < _size142; ++_i147)
        {
          var elem148 = null;
          elem148 = new ttypes.UserInfo();
          elem148.read(input);
          this.success.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.NotFoundException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

userservice_getChatGroupMembers_result.prototype.write = function(output) {
  output.writeStructBegin('userservice_getChatGroupMembers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter149 in this.success)
    {
      if (this.success.hasOwnProperty(iter149))
      {
        iter149 = this.success[iter149];
        iter149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

userserviceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
userserviceClient.prototype = {};
userserviceClient.prototype.seqid = function() { return this._seqid; }
userserviceClient.prototype.new_seqid = function() { return this._seqid += 1; }
userserviceClient.prototype.add = function(val1, val2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add(val1, val2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add(val1, val2);
  }
};

userserviceClient.prototype.send_add = function(val1, val2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_add_args();
  args.val1 = val1;
  args.val2 = val2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_add = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_add_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add failed: unknown result');
};
userserviceClient.prototype.range = function(startVal, endVal, step, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_range(startVal, endVal, step);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_range(startVal, endVal, step);
  }
};

userserviceClient.prototype.send_range = function(startVal, endVal, step) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('range', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_range_args();
  args.startVal = startVal;
  args.endVal = endVal;
  args.step = step;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_range = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_range_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('range failed: unknown result');
};
userserviceClient.prototype.getUserById = function(userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserById(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserById(userId);
  }
};

userserviceClient.prototype.send_getUserById = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserById', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserById_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserById failed: unknown result');
};
userserviceClient.prototype.updateUserInfo = function(userId, userInfo, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateUserInfo(userId, userInfo);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateUserInfo(userId, userInfo);
  }
};

userserviceClient.prototype.send_updateUserInfo = function(userId, userInfo) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateUserInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateUserInfo_args();
  args.userId = userId;
  args.userInfo = userInfo;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateUserInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateUserInfo_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
userserviceClient.prototype.isContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isContact(userA, userB);
  }
};

userserviceClient.prototype.send_isContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_isContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_isContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_isContact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isContact failed: unknown result');
};
userserviceClient.prototype.addContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addContact(userA, userB);
  }
};

userserviceClient.prototype.send_addContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addContact_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
userserviceClient.prototype.addContacts = function(userA, targets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addContacts(userA, targets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addContacts(userA, targets);
  }
};

userserviceClient.prototype.send_addContacts = function(userA, targets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addContacts_args();
  args.userA = userA;
  args.targets = targets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addContacts_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
userserviceClient.prototype.removeContact = function(userA, userB, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeContact(userA, userB);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeContact(userA, userB);
  }
};

userserviceClient.prototype.send_removeContact = function(userA, userB) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeContact', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeContact_args();
  args.userA = userA;
  args.userB = userB;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeContact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeContact_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
userserviceClient.prototype.removeContacts = function(userA, targets, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeContacts(userA, targets);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeContacts(userA, targets);
  }
};

userserviceClient.prototype.send_removeContacts = function(userA, targets) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeContacts', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeContacts_args();
  args.userA = userA;
  args.targets = targets;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeContacts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeContacts_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
userserviceClient.prototype.getContactList = function(userId, fields, offset, count, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getContactList(userId, fields, offset, count);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getContactList(userId, fields, offset, count);
  }
};

userserviceClient.prototype.send_getContactList = function(userId, fields, offset, count) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getContactList', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getContactList_args();
  args.userId = userId;
  args.fields = fields;
  args.offset = offset;
  args.count = count;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getContactList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getContactList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getContactList failed: unknown result');
};
userserviceClient.prototype.login = function(loginName, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_login(loginName, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_login(loginName, password);
  }
};

userserviceClient.prototype.send_login = function(loginName, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_login_args();
  args.loginName = loginName;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
userserviceClient.prototype.createUser = function(nickName, password, tel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUser(nickName, password, tel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUser(nickName, password, tel);
  }
};

userserviceClient.prototype.send_createUser = function(nickName, password, tel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createUser_args();
  args.nickName = nickName;
  args.password = password;
  args.tel = tel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUser failed: unknown result');
};
userserviceClient.prototype.createChatGroup = function(creator, name, participants, chatGroupProps, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createChatGroup(creator, name, participants, chatGroupProps);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createChatGroup(creator, name, participants, chatGroupProps);
  }
};

userserviceClient.prototype.send_createChatGroup = function(creator, name, participants, chatGroupProps) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_createChatGroup_args();
  args.creator = creator;
  args.name = name;
  args.participants = participants;
  args.chatGroupProps = chatGroupProps;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_createChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_createChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createChatGroup failed: unknown result');
};
userserviceClient.prototype.updateChatGroup = function(chatGroupId, chatGroupProps, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateChatGroup(chatGroupId, chatGroupProps);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateChatGroup(chatGroupId, chatGroupProps);
  }
};

userserviceClient.prototype.send_updateChatGroup = function(chatGroupId, chatGroupProps) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_updateChatGroup_args();
  args.chatGroupId = chatGroupId;
  args.chatGroupProps = chatGroupProps;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_updateChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_updateChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex1) {
    return callback(result.ex1);
  }
  if (null !== result.ex2) {
    return callback(result.ex2);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateChatGroup failed: unknown result');
};
userserviceClient.prototype.getChatGroup = function(chatGroupId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroup(chatGroupId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroup(chatGroupId);
  }
};

userserviceClient.prototype.send_getChatGroup = function(chatGroupId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroup_args();
  args.chatGroupId = chatGroupId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroup failed: unknown result');
};
userserviceClient.prototype.getUserChatGroups = function(userId, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUserChatGroups(userId, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUserChatGroups(userId, fields);
  }
};

userserviceClient.prototype.send_getUserChatGroups = function(userId, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserChatGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getUserChatGroups_args();
  args.userId = userId;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getUserChatGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getUserChatGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserChatGroups failed: unknown result');
};
userserviceClient.prototype.addChatGroupMembers = function(chatGroupId, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addChatGroupMembers(chatGroupId, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addChatGroupMembers(chatGroupId, userIds);
  }
};

userserviceClient.prototype.send_addChatGroupMembers = function(chatGroupId, userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_addChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_addChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_addChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.removeChatGroupMembers = function(chatGroupId, userIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeChatGroupMembers(chatGroupId, userIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeChatGroupMembers(chatGroupId, userIds);
  }
};

userserviceClient.prototype.send_removeChatGroupMembers = function(chatGroupId, userIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_removeChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.userIds = userIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_removeChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_removeChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null)
};
userserviceClient.prototype.getChatGroupMembers = function(chatGroupId, fields, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getChatGroupMembers(chatGroupId, fields);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getChatGroupMembers(chatGroupId, fields);
  }
};

userserviceClient.prototype.send_getChatGroupMembers = function(chatGroupId, fields) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatGroupMembers', Thrift.MessageType.CALL, this.seqid());
  var args = new userservice_getChatGroupMembers_args();
  args.chatGroupId = chatGroupId;
  args.fields = fields;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

userserviceClient.prototype.recv_getChatGroupMembers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new userservice_getChatGroupMembers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatGroupMembers failed: unknown result');
};
userserviceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
userserviceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

userserviceProcessor.prototype.process_add = function(seqid, input, output) {
  var args = new userservice_add_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add.length === 2) {
    Q.fcall(this._handler.add, args.val1, args.val2)
      .then(function(result) {
        var result = new userservice_add_result({success: result});
        output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_add_result(err);
        output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.add(args.val1, args.val2,  function (err, result) {
      var result = new userservice_add_result((err != null ? err : {success: result}));
      output.writeMessageBegin("add", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_range = function(seqid, input, output) {
  var args = new userservice_range_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.range.length === 3) {
    Q.fcall(this._handler.range, args.startVal, args.endVal, args.step)
      .then(function(result) {
        var result = new userservice_range_result({success: result});
        output.writeMessageBegin("range", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_range_result(err);
        output.writeMessageBegin("range", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.range(args.startVal, args.endVal, args.step,  function (err, result) {
      var result = new userservice_range_result((err != null ? err : {success: result}));
      output.writeMessageBegin("range", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserById = function(seqid, input, output) {
  var args = new userservice_getUserById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserById.length === 1) {
    Q.fcall(this._handler.getUserById, args.userId)
      .then(function(result) {
        var result = new userservice_getUserById_result({success: result});
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getUserById_result(err);
        output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserById(args.userId,  function (err, result) {
      var result = new userservice_getUserById_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserById", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateUserInfo = function(seqid, input, output) {
  var args = new userservice_updateUserInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateUserInfo.length === 2) {
    Q.fcall(this._handler.updateUserInfo, args.userId, args.userInfo)
      .then(function(result) {
        var result = new userservice_updateUserInfo_result({success: result});
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_updateUserInfo_result(err);
        output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateUserInfo(args.userId, args.userInfo,  function (err, result) {
      var result = new userservice_updateUserInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateUserInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_isContact = function(seqid, input, output) {
  var args = new userservice_isContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isContact.length === 2) {
    Q.fcall(this._handler.isContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_isContact_result({success: result});
        output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_isContact_result(err);
        output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isContact(args.userA, args.userB,  function (err, result) {
      var result = new userservice_isContact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isContact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addContact = function(seqid, input, output) {
  var args = new userservice_addContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addContact.length === 2) {
    Q.fcall(this._handler.addContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_addContact_result({success: result});
        output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_addContact_result(err);
        output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addContact(args.userA, args.userB,  function (err, result) {
      var result = new userservice_addContact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addContact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addContacts = function(seqid, input, output) {
  var args = new userservice_addContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addContacts.length === 2) {
    Q.fcall(this._handler.addContacts, args.userA, args.targets)
      .then(function(result) {
        var result = new userservice_addContacts_result({success: result});
        output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_addContacts_result(err);
        output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addContacts(args.userA, args.targets,  function (err, result) {
      var result = new userservice_addContacts_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addContacts", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeContact = function(seqid, input, output) {
  var args = new userservice_removeContact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeContact.length === 2) {
    Q.fcall(this._handler.removeContact, args.userA, args.userB)
      .then(function(result) {
        var result = new userservice_removeContact_result({success: result});
        output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_removeContact_result(err);
        output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeContact(args.userA, args.userB,  function (err, result) {
      var result = new userservice_removeContact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeContact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeContacts = function(seqid, input, output) {
  var args = new userservice_removeContacts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeContacts.length === 2) {
    Q.fcall(this._handler.removeContacts, args.userA, args.targets)
      .then(function(result) {
        var result = new userservice_removeContacts_result({success: result});
        output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_removeContacts_result(err);
        output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeContacts(args.userA, args.targets,  function (err, result) {
      var result = new userservice_removeContacts_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeContacts", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getContactList = function(seqid, input, output) {
  var args = new userservice_getContactList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getContactList.length === 4) {
    Q.fcall(this._handler.getContactList, args.userId, args.fields, args.offset, args.count)
      .then(function(result) {
        var result = new userservice_getContactList_result({success: result});
        output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getContactList_result(err);
        output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getContactList(args.userId, args.fields, args.offset, args.count,  function (err, result) {
      var result = new userservice_getContactList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getContactList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new userservice_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.login.length === 2) {
    Q.fcall(this._handler.login, args.loginName, args.password)
      .then(function(result) {
        var result = new userservice_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_login_result(err);
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.login(args.loginName, args.password,  function (err, result) {
      var result = new userservice_login_result((err != null ? err : {success: result}));
      output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new userservice_createUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUser.length === 3) {
    Q.fcall(this._handler.createUser, args.nickName, args.password, args.tel)
      .then(function(result) {
        var result = new userservice_createUser_result({success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_createUser_result(err);
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUser(args.nickName, args.password, args.tel,  function (err, result) {
      var result = new userservice_createUser_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_createChatGroup = function(seqid, input, output) {
  var args = new userservice_createChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createChatGroup.length === 4) {
    Q.fcall(this._handler.createChatGroup, args.creator, args.name, args.participants, args.chatGroupProps)
      .then(function(result) {
        var result = new userservice_createChatGroup_result({success: result});
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_createChatGroup_result(err);
        output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createChatGroup(args.creator, args.name, args.participants, args.chatGroupProps,  function (err, result) {
      var result = new userservice_createChatGroup_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createChatGroup", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_updateChatGroup = function(seqid, input, output) {
  var args = new userservice_updateChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateChatGroup.length === 2) {
    Q.fcall(this._handler.updateChatGroup, args.chatGroupId, args.chatGroupProps)
      .then(function(result) {
        var result = new userservice_updateChatGroup_result({success: result});
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_updateChatGroup_result(err);
        output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateChatGroup(args.chatGroupId, args.chatGroupProps,  function (err, result) {
      var result = new userservice_updateChatGroup_result((err != null ? err : {success: result}));
      output.writeMessageBegin("updateChatGroup", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroup = function(seqid, input, output) {
  var args = new userservice_getChatGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroup.length === 1) {
    Q.fcall(this._handler.getChatGroup, args.chatGroupId)
      .then(function(result) {
        var result = new userservice_getChatGroup_result({success: result});
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getChatGroup_result(err);
        output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroup(args.chatGroupId,  function (err, result) {
      var result = new userservice_getChatGroup_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChatGroup", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getUserChatGroups = function(seqid, input, output) {
  var args = new userservice_getUserChatGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUserChatGroups.length === 2) {
    Q.fcall(this._handler.getUserChatGroups, args.userId, args.fields)
      .then(function(result) {
        var result = new userservice_getUserChatGroups_result({success: result});
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getUserChatGroups_result(err);
        output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUserChatGroups(args.userId, args.fields,  function (err, result) {
      var result = new userservice_getUserChatGroups_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUserChatGroups", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_addChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_addChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addChatGroupMembers.length === 2) {
    Q.fcall(this._handler.addChatGroupMembers, args.chatGroupId, args.userIds)
      .then(function(result) {
        var result = new userservice_addChatGroupMembers_result({success: result});
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_addChatGroupMembers_result(err);
        output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addChatGroupMembers(args.chatGroupId, args.userIds,  function (err, result) {
      var result = new userservice_addChatGroupMembers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_removeChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_removeChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeChatGroupMembers.length === 2) {
    Q.fcall(this._handler.removeChatGroupMembers, args.chatGroupId, args.userIds)
      .then(function(result) {
        var result = new userservice_removeChatGroupMembers_result({success: result});
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_removeChatGroupMembers_result(err);
        output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeChatGroupMembers(args.chatGroupId, args.userIds,  function (err, result) {
      var result = new userservice_removeChatGroupMembers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

userserviceProcessor.prototype.process_getChatGroupMembers = function(seqid, input, output) {
  var args = new userservice_getChatGroupMembers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getChatGroupMembers.length === 2) {
    Q.fcall(this._handler.getChatGroupMembers, args.chatGroupId, args.fields)
      .then(function(result) {
        var result = new userservice_getChatGroupMembers_result({success: result});
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new userservice_getChatGroupMembers_result(err);
        output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getChatGroupMembers(args.chatGroupId, args.fields,  function (err, result) {
      var result = new userservice_getChatGroupMembers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getChatGroupMembers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

