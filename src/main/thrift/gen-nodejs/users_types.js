//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.Gender = {
  'MALE' : 0,
  'FEMALE' : 1
};
ttypes.GroupType = {
  'CHAT_GROUP' : 0,
  'GROUP' : 1
};
ttypes.UserInfoProp = {
  'USER_ID' : 0,
  'NICK_NAME' : 1,
  'AVATAR' : 2,
  'GENDER' : 3,
  'SIGNATURE' : 4,
  'TEL' : 5
};
ttypes.ChatGroupProp = {
  'CHAT_GROUP_ID' : 0,
  'NAME' : 1,
  'GROUP_DESC' : 2,
  'GROUP_TYPE' : 3,
  'AVATAR' : 4,
  'TAGS' : 5,
  'CREATOR' : 6,
  'ADMIN' : 7,
  'PARTICIPANTS' : 8,
  'MAX_USERS' : 9,
  'CREATE_TIME' : 10,
  'UPDATE_TIME' : 11,
  'VISIBLE' : 12
};
UserInfo = module.exports.UserInfo = function(args) {
  this.userId = null;
  this.nickName = null;
  this.avatar = null;
  this.gender = null;
  this.signature = null;
  this.tel = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.avatar !== undefined) {
      this.avatar = args.avatar;
    }
    if (args.gender !== undefined) {
      this.gender = args.gender;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
    if (args.tel !== undefined) {
      this.tel = args.tel;
    }
  }
};
UserInfo.prototype = {};
UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.avatar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.gender = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 2);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.avatar !== null && this.avatar !== undefined) {
    output.writeFieldBegin('avatar', Thrift.Type.STRING, 3);
    output.writeString(this.avatar);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.I32, 4);
    output.writeI32(this.gender);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 5);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 6);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChatGroup = module.exports.ChatGroup = function(args) {
  this.chatGroupId = null;
  this.name = null;
  this.groupDesc = null;
  this.groupType = null;
  this.avatar = null;
  this.tags = null;
  this.creator = null;
  this.admin = null;
  this.participants = null;
  this.maxUsers = null;
  this.createTime = null;
  this.updateTime = null;
  this.visible = null;
  if (args) {
    if (args.chatGroupId !== undefined) {
      this.chatGroupId = args.chatGroupId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.groupDesc !== undefined) {
      this.groupDesc = args.groupDesc;
    }
    if (args.groupType !== undefined) {
      this.groupType = args.groupType;
    }
    if (args.avatar !== undefined) {
      this.avatar = args.avatar;
    }
    if (args.tags !== undefined) {
      this.tags = args.tags;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.admin !== undefined) {
      this.admin = args.admin;
    }
    if (args.participants !== undefined) {
      this.participants = args.participants;
    }
    if (args.maxUsers !== undefined) {
      this.maxUsers = args.maxUsers;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.updateTime !== undefined) {
      this.updateTime = args.updateTime;
    }
    if (args.visible !== undefined) {
      this.visible = args.visible;
    }
  }
};
ChatGroup.prototype = {};
ChatGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.chatGroupId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.groupDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.groupType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.avatar = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tags = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.tags.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.creator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.admin = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readI64();
          this.admin.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.participants = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI64();
          this.participants.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.maxUsers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.updateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatGroup.prototype.write = function(output) {
  output.writeStructBegin('ChatGroup');
  if (this.chatGroupId !== null && this.chatGroupId !== undefined) {
    output.writeFieldBegin('chatGroupId', Thrift.Type.I64, 1);
    output.writeI64(this.chatGroupId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.groupDesc !== null && this.groupDesc !== undefined) {
    output.writeFieldBegin('groupDesc', Thrift.Type.STRING, 3);
    output.writeString(this.groupDesc);
    output.writeFieldEnd();
  }
  if (this.groupType !== null && this.groupType !== undefined) {
    output.writeFieldBegin('groupType', Thrift.Type.I32, 4);
    output.writeI32(this.groupType);
    output.writeFieldEnd();
  }
  if (this.avatar !== null && this.avatar !== undefined) {
    output.writeFieldBegin('avatar', Thrift.Type.STRING, 5);
    output.writeString(this.avatar);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter21 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter21))
      {
        iter21 = this.tags[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.I64, 7);
    output.writeI64(this.creator);
    output.writeFieldEnd();
  }
  if (this.admin !== null && this.admin !== undefined) {
    output.writeFieldBegin('admin', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.I64, this.admin.length);
    for (var iter22 in this.admin)
    {
      if (this.admin.hasOwnProperty(iter22))
      {
        iter22 = this.admin[iter22];
        output.writeI64(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.participants !== null && this.participants !== undefined) {
    output.writeFieldBegin('participants', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.I64, this.participants.length);
    for (var iter23 in this.participants)
    {
      if (this.participants.hasOwnProperty(iter23))
      {
        iter23 = this.participants[iter23];
        output.writeI64(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.maxUsers !== null && this.maxUsers !== undefined) {
    output.writeFieldBegin('maxUsers', Thrift.Type.I32, 10);
    output.writeI32(this.maxUsers);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 11);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.updateTime !== null && this.updateTime !== undefined) {
    output.writeFieldBegin('updateTime', Thrift.Type.I64, 12);
    output.writeI64(this.updateTime);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 13);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotFoundException = module.exports.NotFoundException = function(args) {
  Thrift.TException.call(this, "NotFoundException")
  this.name = "NotFoundException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(NotFoundException, Thrift.TException);
NotFoundException.prototype.name = 'NotFoundException';
NotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotFoundException.prototype.write = function(output) {
  output.writeStructBegin('NotFoundException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidArgsException = module.exports.InvalidArgsException = function(args) {
  Thrift.TException.call(this, "InvalidArgsException")
  this.name = "InvalidArgsException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidArgsException, Thrift.TException);
InvalidArgsException.prototype.name = 'InvalidArgsException';
InvalidArgsException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidArgsException.prototype.write = function(output) {
  output.writeStructBegin('InvalidArgsException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthException = module.exports.AuthException = function(args) {
  Thrift.TException.call(this, "AuthException")
  this.name = "AuthException"
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AuthException, Thrift.TException);
AuthException.prototype.name = 'AuthException';
AuthException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthException.prototype.write = function(output) {
  output.writeStructBegin('AuthException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

