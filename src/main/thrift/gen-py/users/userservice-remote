#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings,new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from users import userservice
from users.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i32 add(i32 val1, i32 val2)')
  print('   range(i32 startVal, i32 endVal, i32 step)')
  print('  UserInfo getUserById(i64 userId)')
  print('  void updateUserInfo(i64 userId,  userInfo)')
  print('  bool isContact(i64 userA, i64 userB)')
  print('  void addContact(i64 userA, i64 userB)')
  print('  void addContacts(i64 userA,  targets)')
  print('  void removeContact(i64 userA, i64 userB)')
  print('  void removeContacts(i64 userA,  targets)')
  print('   getContactList(i64 userId,  fields, i32 offset, i32 count)')
  print('  UserInfo login(string loginName, string password)')
  print('  UserInfo createUser(string nickName, string password, string tel)')
  print('  ChatGroup createChatGroup(i64 creator, string name,  participants,  chatGroupProps)')
  print('  ChatGroup updateChatGroup(i64 chatGroupId,  chatGroupProps)')
  print('  ChatGroup getChatGroup(i64 chatGroupId)')
  print('   getUserChatGroups(i64 userId,  fields)')
  print('  void addChatGroupMembers(i64 chatGroupId,  userIds)')
  print('  void removeChatGroupMembers(i64 chatGroupId,  userIds)')
  print('   getChatGroupMembers(i64 chatGroupId,  fields)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = userservice.Client(protocol)
transport.open()

if cmd == 'add':
  if len(args) != 2:
    print('add requires 2 args')
    sys.exit(1)
  pp.pprint(client.add(eval(args[0]),eval(args[1]),))

elif cmd == 'range':
  if len(args) != 3:
    print('range requires 3 args')
    sys.exit(1)
  pp.pprint(client.range(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'getUserById':
  if len(args) != 1:
    print('getUserById requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUserById(eval(args[0]),))

elif cmd == 'updateUserInfo':
  if len(args) != 2:
    print('updateUserInfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateUserInfo(eval(args[0]),eval(args[1]),))

elif cmd == 'isContact':
  if len(args) != 2:
    print('isContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.isContact(eval(args[0]),eval(args[1]),))

elif cmd == 'addContact':
  if len(args) != 2:
    print('addContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.addContact(eval(args[0]),eval(args[1]),))

elif cmd == 'addContacts':
  if len(args) != 2:
    print('addContacts requires 2 args')
    sys.exit(1)
  pp.pprint(client.addContacts(eval(args[0]),eval(args[1]),))

elif cmd == 'removeContact':
  if len(args) != 2:
    print('removeContact requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeContact(eval(args[0]),eval(args[1]),))

elif cmd == 'removeContacts':
  if len(args) != 2:
    print('removeContacts requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeContacts(eval(args[0]),eval(args[1]),))

elif cmd == 'getContactList':
  if len(args) != 4:
    print('getContactList requires 4 args')
    sys.exit(1)
  pp.pprint(client.getContactList(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'login':
  if len(args) != 2:
    print('login requires 2 args')
    sys.exit(1)
  pp.pprint(client.login(args[0],args[1],))

elif cmd == 'createUser':
  if len(args) != 3:
    print('createUser requires 3 args')
    sys.exit(1)
  pp.pprint(client.createUser(args[0],args[1],args[2],))

elif cmd == 'createChatGroup':
  if len(args) != 4:
    print('createChatGroup requires 4 args')
    sys.exit(1)
  pp.pprint(client.createChatGroup(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'updateChatGroup':
  if len(args) != 2:
    print('updateChatGroup requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateChatGroup(eval(args[0]),eval(args[1]),))

elif cmd == 'getChatGroup':
  if len(args) != 1:
    print('getChatGroup requires 1 args')
    sys.exit(1)
  pp.pprint(client.getChatGroup(eval(args[0]),))

elif cmd == 'getUserChatGroups':
  if len(args) != 2:
    print('getUserChatGroups requires 2 args')
    sys.exit(1)
  pp.pprint(client.getUserChatGroups(eval(args[0]),eval(args[1]),))

elif cmd == 'addChatGroupMembers':
  if len(args) != 2:
    print('addChatGroupMembers requires 2 args')
    sys.exit(1)
  pp.pprint(client.addChatGroupMembers(eval(args[0]),eval(args[1]),))

elif cmd == 'removeChatGroupMembers':
  if len(args) != 2:
    print('removeChatGroupMembers requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeChatGroupMembers(eval(args[0]),eval(args[1]),))

elif cmd == 'getChatGroupMembers':
  if len(args) != 2:
    print('getChatGroupMembers requires 2 args')
    sys.exit(1)
  pp.pprint(client.getChatGroupMembers(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
