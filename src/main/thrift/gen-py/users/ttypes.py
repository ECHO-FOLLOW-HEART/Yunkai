#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings,new_style
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Gender(object):
  MALE = 0
  FEMALE = 1

  _VALUES_TO_NAMES = {
    0: "MALE",
    1: "FEMALE",
  }

  _NAMES_TO_VALUES = {
    "MALE": 0,
    "FEMALE": 1,
  }

class GroupType(object):
  CHAT_GROUP = 0
  GROUP = 1

  _VALUES_TO_NAMES = {
    0: "CHAT_GROUP",
    1: "GROUP",
  }

  _NAMES_TO_VALUES = {
    "CHAT_GROUP": 0,
    "GROUP": 1,
  }

class UserInfoProp(object):
  USER_ID = 0
  NICK_NAME = 1
  AVATAR = 2
  GENDER = 3
  SIGNATURE = 4
  TEL = 5

  _VALUES_TO_NAMES = {
    0: "USER_ID",
    1: "NICK_NAME",
    2: "AVATAR",
    3: "GENDER",
    4: "SIGNATURE",
    5: "TEL",
  }

  _NAMES_TO_VALUES = {
    "USER_ID": 0,
    "NICK_NAME": 1,
    "AVATAR": 2,
    "GENDER": 3,
    "SIGNATURE": 4,
    "TEL": 5,
  }

class ChatGroupProp(object):
  CHAT_GROUP_ID = 0
  NAME = 1
  GROUP_DESC = 2
  GROUP_TYPE = 3
  AVATAR = 4
  TAGS = 5
  CREATOR = 6
  ADMIN = 7
  PARTICIPANTS = 8
  MAX_USERS = 9
  CREATE_TIME = 10
  UPDATE_TIME = 11
  VISIBLE = 12

  _VALUES_TO_NAMES = {
    0: "CHAT_GROUP_ID",
    1: "NAME",
    2: "GROUP_DESC",
    3: "GROUP_TYPE",
    4: "AVATAR",
    5: "TAGS",
    6: "CREATOR",
    7: "ADMIN",
    8: "PARTICIPANTS",
    9: "MAX_USERS",
    10: "CREATE_TIME",
    11: "UPDATE_TIME",
    12: "VISIBLE",
  }

  _NAMES_TO_VALUES = {
    "CHAT_GROUP_ID": 0,
    "NAME": 1,
    "GROUP_DESC": 2,
    "GROUP_TYPE": 3,
    "AVATAR": 4,
    "TAGS": 5,
    "CREATOR": 6,
    "ADMIN": 7,
    "PARTICIPANTS": 8,
    "MAX_USERS": 9,
    "CREATE_TIME": 10,
    "UPDATE_TIME": 11,
    "VISIBLE": 12,
  }


class UserInfo(object):
  """
  Attributes:
   - userId
   - nickName
   - avatar
   - gender
   - signature
   - tel
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.STRING, 'nickName', None, None, ), # 2
    (3, TType.STRING, 'avatar', None, None, ), # 3
    (4, TType.I32, 'gender', None, None, ), # 4
    (5, TType.STRING, 'signature', None, None, ), # 5
    (6, TType.STRING, 'tel', None, None, ), # 6
  )

  def __init__(self, userId=None, nickName=None, avatar=None, gender=None, signature=None, tel=None,):
    self.userId = userId
    self.nickName = nickName
    self.avatar = avatar
    self.gender = gender
    self.signature = signature
    self.tel = tel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.nickName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.avatar = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.signature = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tel = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 2)
      oprot.writeString(self.nickName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.avatar is not None:
      oprot.writeFieldBegin('avatar', TType.STRING, 3)
      oprot.writeString(self.avatar.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 4)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.signature is not None:
      oprot.writeFieldBegin('signature', TType.STRING, 5)
      oprot.writeString(self.signature.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.tel is not None:
      oprot.writeFieldBegin('tel', TType.STRING, 6)
      oprot.writeString(self.tel.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.avatar)
    value = (value * 31) ^ hash(self.gender)
    value = (value * 31) ^ hash(self.signature)
    value = (value * 31) ^ hash(self.tel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChatGroup(object):
  """
  Attributes:
   - chatGroupId
   - name
   - groupDesc
   - groupType
   - avatar
   - tags
   - creator
   - admin
   - participants
   - maxUsers
   - createTime
   - updateTime
   - visible
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'chatGroupId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'groupDesc', None, None, ), # 3
    (4, TType.I32, 'groupType', None, None, ), # 4
    (5, TType.STRING, 'avatar', None, None, ), # 5
    (6, TType.LIST, 'tags', (TType.STRING,None), None, ), # 6
    (7, TType.I64, 'creator', None, None, ), # 7
    (8, TType.LIST, 'admin', (TType.I64,None), None, ), # 8
    (9, TType.LIST, 'participants', (TType.I64,None), None, ), # 9
    (10, TType.I32, 'maxUsers', None, None, ), # 10
    (11, TType.I64, 'createTime', None, None, ), # 11
    (12, TType.I64, 'updateTime', None, None, ), # 12
    (13, TType.BOOL, 'visible', None, None, ), # 13
  )

  def __init__(self, chatGroupId=None, name=None, groupDesc=None, groupType=None, avatar=None, tags=None, creator=None, admin=None, participants=None, maxUsers=None, createTime=None, updateTime=None, visible=None,):
    self.chatGroupId = chatGroupId
    self.name = name
    self.groupDesc = groupDesc
    self.groupType = groupType
    self.avatar = avatar
    self.tags = tags
    self.creator = creator
    self.admin = admin
    self.participants = participants
    self.maxUsers = maxUsers
    self.createTime = createTime
    self.updateTime = updateTime
    self.visible = visible

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.chatGroupId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.groupDesc = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.groupType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.avatar = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.tags = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString().decode('utf-8')
            self.tags.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.creator = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.admin = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.admin.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.participants = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI64();
            self.participants.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.maxUsers = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.visible = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChatGroup')
    if self.chatGroupId is not None:
      oprot.writeFieldBegin('chatGroupId', TType.I64, 1)
      oprot.writeI64(self.chatGroupId)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.groupDesc is not None:
      oprot.writeFieldBegin('groupDesc', TType.STRING, 3)
      oprot.writeString(self.groupDesc.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.groupType is not None:
      oprot.writeFieldBegin('groupType', TType.I32, 4)
      oprot.writeI32(self.groupType)
      oprot.writeFieldEnd()
    if self.avatar is not None:
      oprot.writeFieldBegin('avatar', TType.STRING, 5)
      oprot.writeString(self.avatar.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.tags))
      for iter18 in self.tags:
        oprot.writeString(iter18.encode('utf-8'))
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.creator is not None:
      oprot.writeFieldBegin('creator', TType.I64, 7)
      oprot.writeI64(self.creator)
      oprot.writeFieldEnd()
    if self.admin is not None:
      oprot.writeFieldBegin('admin', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.admin))
      for iter19 in self.admin:
        oprot.writeI64(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.participants is not None:
      oprot.writeFieldBegin('participants', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.participants))
      for iter20 in self.participants:
        oprot.writeI64(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.maxUsers is not None:
      oprot.writeFieldBegin('maxUsers', TType.I32, 10)
      oprot.writeI32(self.maxUsers)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 11)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 12)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.visible is not None:
      oprot.writeFieldBegin('visible', TType.BOOL, 13)
      oprot.writeBool(self.visible)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.chatGroupId)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.groupDesc)
    value = (value * 31) ^ hash(self.groupType)
    value = (value * 31) ^ hash(self.avatar)
    value = (value * 31) ^ hash(self.tags)
    value = (value * 31) ^ hash(self.creator)
    value = (value * 31) ^ hash(self.admin)
    value = (value * 31) ^ hash(self.participants)
    value = (value * 31) ^ hash(self.maxUsers)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.visible)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotFoundException(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotFoundException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidArgsException(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidArgsException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthException(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
